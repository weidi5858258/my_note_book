构造函数的作用：
1、构造对象
2、初始化对象
3、

类型不一样进行赋值时，中间必须要借助一个临时变量。
如果这个临时变量产生不了，那么这个赋值操作就会失败。
产生的中间变量的类型为赋值操作的左值的类型，然后把右值当作这个临时变量的初始值从而生成一个中间变量，最后把这个中间变量赋给左值。

templeate<typename Type>
typeid(Type).name()

template<typename T> 
T sum(T a, T b);
template<typename 数据类型参数, typename 数据类型参数, ...>
class 类名
{
	
};

template<typename T1, typename T2>
class Point
{
private:
	T1 x;
	T2 y;
public:
	Point(T1 _x, T2 _y): x(_x), y(_y){}
	T1 getX();
	void setX(T1 x);
	T2 getY();
	void setY(T2 y);
};

产生随机数
void srand(unsigned seed)
ctime头文件中的time函数
srand(time(NULL))
chrono头文件中的std::chrono::system_clock
srand(std::chrono::system_clock::to_time_t(std::chrono::system_clock::now()));
rand()和srand()原型写在头文件cstdlib中

队列queue<>
链表list<>
Lambda表达式
定义头文件

STL的组成构件
STL的组件中最主要的是容器、迭代器、算法和仿函数。
容器:用来管理某类对象的集合
迭代器：用来在一个对象群集的元素上进行遍历动作
算法：用来处理群集内的元素

Error:Execution failed for task ':app:transformClassesWithDexForDebug'.
> com.android.build.api.transform.TransformException: com.android.ide.common.process.ProcessException: java.util.concurrent.ExecutionException: java.lang.UnsupportedOperationException

cin遇到不可见字符和空字符就停止输入（不可见字符指的
是制表符和空格），而cout则只是遇到空字符才停止输出。
这就量为什么将空字符作为字符串结束标志的原因，
cin和cout遇到空字符都会结束输入和输出操作。

空字符串的ASCLL为32，而空字符（空格）的ASCLL为0。
cin.get（str， 1000）能接收空格。
' ' == 32
char name[] = {'a','b',32,'c',0,'\0'};
后面要自己添加上'\0'，这样字符数组才能转化成字符串。
char name[] = {"abc efg"};
后面不需要自己再添加'\0'。
strlen(name):不包括不可见字符（不可见：结束符）
sizeof(name):包括不可见字符
strcmp(ch1, ch2)
不能把一个数组名赋给另一个数组名
strcpy(ch1, ch2)把ch2赋给ch1
strcpy函数会将ch2中的所有字符，包括结束标志'\0'一块复制到ch1中去
#include <string>
using namespace std;
str1.assign(str2, 3, 1)
strcat(ch1, ch2)
下面几个函数都是计算字符串的可见长度
strlen(str1.c_str())
str1.size()
str1.length()

strncat(ch1, ch2, 5)
str1.append(str2, 5, 3)

静态联编：编译时、运行时
动态联编：联编工作是在编译时确定的
class A
{
public:
	virtual int get()
	{
		return 0;
	}
};
class B : public A
{
	int get()
	{
		return 1;
	}	
};
int main()
{
	B b;
	A* p = &b;
	cout<<p->get()<<endl;// 1
	cout<<p->A::get()<<endl;// 0
}

未测试
class A
{
public:
	int get()
	{
		return 0;
	}
};
class B : public A
{
	int get()
	{
		return 1;
	}	
};
int main()
{
	B b;
	A* p = &b;
	cout<<p->get()<<endl;
	cout<<p->B::get()<<endl;
}

一个派生类对象在创建时会首先调用基类的构造函数，
然后调用该类的构造函数，一般情况下，在使用虚函数时，
我们都会将派生类对象传递给指向基类的指针，那么假如
指向派生类对象的指针删除时会发生什么情况呢？如果
析构函数是虚函数，那么就会进行正确的操作，它会先调用
派生类的析构函数，由于一般情况下任何类的析构函数都可
声明为虚析构函数，当指针被删除时，系统会获得对象运行
时的类型并调用正确的析构函数。但是要注意三点：
1、由于析构函数不允许有参数，因此它不可能实现重载，
那么一个类就只能有一个虚析构函数。
2、只要基类的析构函数被说明为虚函数，那么派生类的析构函数无论说明与否，都自然成为虚函数。
3、在C++中虚构造函数是不存在的，因此也无法声明。

dynamic_cast<son>(father)
typeid()

Vector:
特点:
at
front
back
Vector<typename T> c;
c.at(index);
c.front();
c.back();
c[index];
c.push_back(obj);

迭代器相关的函数：
begin容器中第一个元素
end最后一个元素的下一个位置
rbegin逆向迭代器的第一个元素
rend逆向迭代器的最后一个元素的下一个元素

find():Temlpate<class InputIterator, class T> inline
find_if():Temlpate<class InputIterator, class T, class Predicate> inline

for_each(c.begin(), c.end(), print);
Vector<int>::iterator location_index;
location_index = find(c.begin(), c.end(), 5);
location_index = find_if(c.begin(), c.end(), bind2nd(greater<int>(), 5));


标准模板库：
1、容器：
1-1、顺序容器
vector：从后面快速的插入与删除，直接访问任何元素
deque：从前面或后面快速的插入与删除，直接访问任何元素
list：双链表，从任何地方快速插入与删除
#include <vector>
#include <deque>
#include <list>
vector<string> vt;
deque<int> dq;
list<student> lt;
C<T> c:创建一个名为c的容器，容器类型为C，如vector
或list，T为容器内元素的类型。适用于所有容器。
C c2(c)：创建一个c容器的副本，c2和c必须具有相同的容器类型和元素类型，适用于所有容器。
C c(b, e)：创建一个名为c的容器，元素是迭代器b，
e标示范围内的副本，适用于所有容器。
C c(n, t)：创建一个名为c的容器，元素为
n个个数，值为t，t的类型必须是容器C的元素类型或可以转换为该类型，只适用于顺序容器。
C c(n):创建一个名为c的容器，元素为n个初始化元素的值，元素类型为值n的类型，只适用于顺序容器。

函数：
a)begin和end
返回容器的迭代器，通过迭代器我们可以访问容器内的元素。
std::vector<int>::iterator iter = c.begin();
c.begin();
c.end();
c.rebegin();
c.rend();

b)添加元素
c.push_back():在容器尾部添加值为t的元素，
返回void。
c.push_front()：在容器头部添加值为t的元素，
返回void，只适用于list和deque。
c.insert(p, t)：在迭代器p所指向的元素前面插入
值为t的元素，返回指向t的迭代器。
c.insert(p, n, t)：在迭代器p所指向的元素前面插入
n个值为t的元素，返回void。
c.insert(p, b, e)：在迭代器p所指向的元素前面插入
由迭代器b和e标记的范围内的元素，返回void。

c)获得容器大小
c.size()：返回容器内元素个数，
返回类型为c::size_type。
c.max_size()：返回容器内最多可容纳的元素个数，
返回类型为c::size_type。
c.empty()：测试容器内是否有元素。
c.resize()：重新调整容器大小，使其能容纳n个元素。
c.resize(n, t)：重新调整容器大小，逾期能容纳n个
元素，新添加元素以值t进行初始化。

d)访问容器元素
c.front()：返回容器内第一个元素的引用，如果c为
空，该操作未定义。
c.back()：返回容器内最后一个元素的引用，如果c为
空，该操作未定义。
c[n] at方法：返回下标为n的引用，n越界时，该操作
未定义，只用于vector和deque。

e)删除元素
c.erase(p)：删除迭代器p指向的元素，返回一个指向
被删除元素后面的元素的迭代器。
c.erase(b, e)：删除迭代器b和e标记范围内的所有
元素，返回一个指向被删除元素段后面的元素的
迭代器。
c.clear()：删除容器内的所有元素，返回void。
c.pop_front()：删除容器的第一个元素，返回void，只
适用于list和deque。
c.pop_back()：删除容器的最后一个元素，返回void。

f)赋值操作
c1 = c2：删除c1的所有元素，将c2的所有元素复制
给c1，c1和c2的容器类型及元素类型必须相同。
c1.swap(c2)：交换c1和c2中的所有元素，c1和c2的容器
类型及元素类型必须相同。
c.assign(b, e)：重新给c赋值，内容为b和e所标记范围内
的元素，b和e必须不是指向c中的元素的迭代器。
c.assign(n, t)：将c中的元素重新调转为n个值为t的
元素。










1-2、关联容器
set：快速查找，不允许有重复的值
multiset：快速查找，允许有重复的值
map：一对多映射，基于关键字快速查找，不允许有重复的值
multimap：一对多映射，基于关键字快速查找，允许有重复的值












1-3、容器适配器
stack：先进后出
queue：先进先出
priority_queue：最高优先级元素，问题第一个出列












2、迭代器
3、算法
4、仿函数
















